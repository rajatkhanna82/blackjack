// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      this.get('playerHand').on('all', this.playerEvents, this);
      return this.get('dealerHand').on('all', this.dealerEvents, this);
    };

    App.prototype.reload = function() {
      this.get('playerHand').newDeal();
      return this.get('dealerHand').newDeal();
    };

    App.prototype.playerEvents = function(event) {
      console.log("player event: " + event + " ");
      switch (event) {
        case 'bust':
          return this.trigger('dealerWins');
        case 'stand':
          return this.get('dealerHand').playToWin();
      }
    };

    App.prototype.dealerEvents = function(event) {
      switch (event) {
        case 'bust':
          return this.trigger('playerWins');
        case 'stand':
          return this.checkScores();
      }
    };

    App.prototype.checkScores = function() {
      if (this.get('playerHand').maxScore() > this.get('dealerHand').maxScore()) {
        this.trigger('playerWins');
      }
      if (this.get('playerHand').maxScore() < this.get('dealerHand').maxScore()) {
        this.trigger('dealerWins');
      }
      if (this.get('playerHand').maxScore() === this.get('dealerHand').maxScore()) {
        return this.trigger('tie');
      }
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.map
